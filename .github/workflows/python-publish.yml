name: Publish to PyPI and Create GitHub Release

on:
  push:
    tags:
      - "v*.*.*"  # Wzorzec dla tagów wersji
  workflow_dispatch:
  pull_request:

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry self add poetry-dynamic-versioning

    - name: Build package
      env:
        POETRY_DYNAMIC_VERSIONING_ENABLE: "true"
      run: poetry build

    - name: Publish to PyPI
      env:
        POETRY_DYNAMIC_VERSIONING_ENABLE: "true"
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
      run: poetry publish --username __token__ --password $POETRY_PYPI_TOKEN_PYPI

    - name: Create GitHub Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}  # Użyj nazwy taga
        release_name: Release ${{ github.ref }}  # Nazwa release, np. "Release v1.0.0"
        body: |
          New release has been published
        draft: false  # False oznacza, że release będzie publiczny
        prerelease: false  # Ustaw na true, jeśli chcesz, aby release był pre-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Wbudowany token GitHub do autoryzacji